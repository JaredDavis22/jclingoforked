name: Build clingo and publish JAR
on:
  workflow_dispatch:
    inputs:
      build_only:
        description: 'Whether to only build the project and skip releasing it (yes/NO)'
        required: false
        default: 'no'
  release:
    types: [created]
jobs:

  build-linux-docker:
    name: Build ${{ matrix.target.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - {
            name: linux-x86-64,
            image: dockcross-manylinux2014-x64,
          }
          - {
            name: linux-aarch64,
            image: dockcross-linux-arm64-lts,
          }
    steps:
      - name: Checkout clingo
        uses: actions/checkout@v4
        with:
          repository: potassco/clingo
          submodules: recursive
          path: clingo
      - name: Checkout jclingo
        uses: actions/checkout@v4
        with:
          path: jclingo
      - name: Build clingo
        shell: bash
        run: |
          cp jclingo/.github/build.sh clingo/jclingo-build.sh
          cd clingo
          ../jclingo/.github/dockcross/${{ matrix.target.image }} bash -c ./jclingo-build.sh "'-DCMAKE_SHARED_LINKER_FLAGS=-static-libgcc -static-libstdc++'"
      - name: Move library
        run: |
          cd ${{ github.workspace }}
          mkdir -p jclingo/src/main/resources/${{ matrix.target.name }}
          cp -p clingo/build/bin/libclingo.so jclingo/src/main/resources/${{ matrix.target.name }}/libclingo.so
      - name: Upload clingo
        uses: actions/upload-artifact@v3
        with:
          name: libraries
          path: ${{ github.workspace }}/jclingo/src/main/resources/


  build-macos-native:
    name: Build ${{ matrix.target.name }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - {
            name: darwin-x86-64,
            cmake: '-DCMAKE_OSX_ARCHITECTURES=x86_64'
          }
          - {
            name: darwin-aarch64,
            cmake: '-DCMAKE_OSX_ARCHITECTURES=arm64'
          }
    steps:
      - name: Checkout clingo
        uses: actions/checkout@v4
        with:
          repository: potassco/clingo
          submodules: recursive
          path: clingo
      - name: Checkout jclingo
        uses: actions/checkout@v4
        with:
          path: jclingo
      - name: Build clingo
        shell: bash
        run: |
          cd ${{ github.workspace }}/clingo
          ../jclingo/.github/build.sh ${{ matrix.target.cmake }}
      - name: Move library
        run: |
          cd ${{ github.workspace }}
          mkdir -p jclingo/src/main/resources/${{ matrix.target.name }}
          cp -p clingo/build/bin/libclingo.dylib jclingo/src/main/resources/${{ matrix.target.name }}/libclingo.dylib
      - name: Upload clingo
        uses: actions/upload-artifact@v3
        with:
          name: libraries
          path: ${{ github.workspace }}/jclingo/src/main/resources/


  build-win-native:
    name: Build ${{ matrix.target.name }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - {
            name: win32-x86-64,
            cmake: '-G "Visual Studio 17 2022" -A "x64"'
          }
          - {
            name: win32-aarch64,
            cmake: '-G "Visual Studio 17 2022" -A "ARM64"'
          }
          - {
            name: win32-x86,
            cmake: '-G "Visual Studio 17 2022" -A "Win32"'
          }
          - {
            name: win32-arm,
            cmake: '-G "Visual Studio 17 2022" -A "ARM"'
          }
    steps:
      - name: Checkout clingo
        uses: actions/checkout@v4
        with:
          repository: potassco/clingo
          submodules: recursive
          path: clingo
      - name: Checkout jclingo
        uses: actions/checkout@v4
        with:
          path: jclingo
      - name: Build clingo
        shell: cmd
        run: |
          cd ${{ github.workspace }}\clingo
          ..\jclingo\.github\build.bat ${{ matrix.target.cmake }}
      - name: Move library
        run: |
          cd ${{ github.workspace }}
          mkdir jclingo\src\main\resources\${{ matrix.target.name }}
          move clingo\build\bin\Release\clingo.dll jclingo\src\main\resources\${{ matrix.target.name }}
      - name: Upload clingo
        uses: actions/upload-artifact@v3
        with:
          name: libraries
          path: ${{ github.workspace }}\jclingo\src\main\resources\


  test-libraries:
    name: Test ${{ matrix.target.os }}
    needs: [build-linux-docker,build-macos-native,build-win-native]
    strategy:
      fail-fast: false
      matrix:
        target:
          - {
            os: ubuntu-latest,
            shell: bash
          }
          - {
            os: macos-latest,
            shell: bash
          }
          - {
            os: windows-latest,
            shell: cmd
          }
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: libraries
          path: ${{ github.workspace }}/src/main/resources/
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Run tests
        shell: ${{ matrix.target.shell }}
        run: mvn test


  release-github-packages:
    name: Publish to GitHub packages
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.build_only == 'no' }}
    needs: test-libraries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: libraries
          path: ${{ github.workspace }}/src/main/resources/
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Publish package
        run: mvn --batch-mode -P github deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-maven-central:
    name: Publish to Maven Central
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.build_only == 'no' }}
    needs: test-libraries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: libraries
          path: ${{ github.workspace }}/src/main/resources/
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Publish package
        run: mvn --batch-mode -P ossrh deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
